import me.modmuss50.mpp.ReleaseType
import java.nio.file.Files

plugins {
	// https://github.com/architectury/architectury-plugin
	id "architectury-plugin" version "3.4-SNAPSHOT"
	// https://maven.architectury.dev/dev/architectury/loom/dev.architectury.loom.gradle.plugin/
	id "dev.architectury.loom" version "1.7.410" apply false
	// 用于将模组发布至 Modrinth 和 CurseForge
	// https://github.com/modmuss50/mod-publish-plugin
	id "me.modmuss50.mod-publish-plugin" version "0.6.3"
}
architectury {
	minecraft = minecraft_version
}
subprojects {
	apply plugin: "dev.architectury.loom"
	loom {
		silentMojangMappingsLicense()
	}
	processResources {
		eachFile {
			expand rootProject.properties
		}
	}
}
allprojects {
	apply plugin: "java"
	apply plugin: "architectury-plugin"
	apply plugin: "maven-publish"
	base {
		archivesName = mod_id
	}
	version = mod_version
	group = mod_group_id
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url "https://jitpack.io"
		}
		// Cloth Config API
		maven {
			url "https://maven.shedaniel.me/"
		}
		// YACL
		maven {
			url "https://maven.isxander.dev/releases"
		}
		maven {
			url "https://maven.quiltmc.org/repository/release"
		}
		maven {
			url "https://oss.sonatype.org/content/repositories/snapshots"
		}
		// Mod Menu
		maven {
			url "https://maven.terraformersmc.com/releases"
		}
		// Modrinth
		gradlePluginPortal()
	}
	java {
		withSourcesJar()
	}
	jar {
		setDuplicatesStrategy DuplicatesStrategy.INCLUDE
		from rootProject.file("LICENSE.txt")
	}
	javadoc.options.encoding = "UTF-8"
	tasks.withType(JavaCompile).configureEach {
		options.encoding "UTF-8"
		options.release = JavaLanguageVersion.of(java_version).asInt()
	}
	tasks.withType(GroovyCompile).configureEach {
		options.encoding "UTF-8"
	}
}

// 生成文件名格式
String archiveFileNameOfLoader(String loader) {
	var loaders = enabled_loaders.split(/\s*,\s*/)
	assert loaders.contains(loader)
	return "${mod_id}-v${mod_version}-mc${minecraft_version}-${loader}"
}

// 检查更新日志的格式
static void validateChangelog(String cl) {
	cl.eachLine {
		if (it.startsWith("###"))
			assert it =~ /^### (Added|Changed|Removed|Fixed|Compatibility|Other)$/
		// 首字母不能小写
		assert !(it =~ (/\s*^\*\s+[a-z]/))
		// 配置键应当用反引号包裹 ``
		assert !(it =~ /[^a-z_`][a-z]+(_[a-z]+)+/)
		assert !(it =~ /[a-z]+(_[a-z]+)+[^a-z_`]/)
		// 句末不能有句号
		assert !(it =~ /[。.]\s*(#\d+)?\u0024/)
	}
}

/**
 * 读取更新日志
 *
 * @param doCheck 是否检查合法性
 */
String readChangelog(boolean doCheck = false) {
	String cl = rootProject.file(changelog_file).text
	if (doCheck)
		validateChangelog(cl)
	return cl.replaceAll(/### [A-Za-z]+[\s\n]+(?=###|\u0024)/, '')
			 .replaceAll(/\n\s+\n/, '\n\n')
			 .replaceAll(/\n+$/, '\n')
}

// 注册任务：检查更新日志
tasks.register("checkChangelog") {
	group "verification"
	description "Check changelog format"
	doLast {
		var cl = readChangelog(true)
		var width = 0
		cl.eachLine (li) -> width = Math.max(width, li.length())
		println "# Changelog:"
		println "=".repeat(width)
		println cl
		println "=".repeat(width)
	}
}
// 将检查更新日志设为 check 的依赖
check {
	dependsOn "checkChangelog"
}
tasks.register("linkRuns") {
	group "loom"
	description "Link running dirs"
	def linkFileTo = { File src, File tar ->
		if (tar.exists()) {
			if (!src.isFile() || !Files.isSameFile(src.toPath(), tar.toPath())) {
				delete src.toPath()
				Files.createLink(src.toPath(), tar.toPath())
			}
		} else {
			if (src.isFile()) {
				Files.move(src.toPath(), tar.toPath())
				Files.createLink(src.toPath(), tar.toPath())
			}
		}
	}
	def linkDirTo = { File src, File tar ->
		if (src.exists()) {
			if (tar.exists()) {
				if (!Files.isSameFile(src.toPath(), tar.toPath())) {
					src.listFiles().each {
						var dFile = new File(tar, it.name)
						if (dFile.exists()) {
							delete it.toPath()
						} else {
							Files.move(it.toPath(), dFile.toPath())
						}
					}
					delete src.toPath()
				}
			} else {
				Files.move(src.toPath(), tar.toPath())
			}
		} else if (tar.exists()) {
			Files.createSymbolicLink(src.toPath(), tar.toPath())
		}
	}
	doLast {
		String[] linkedFiles = ["options.txt"]
		String[] linkedDirs = ["saves", "resourcepacks", "generated", "shaderpacks", "screenshots"]
		def commonRunDir = project("common").file("run")
		mkdir commonRunDir
		linkedFiles.each {
			File file = new File(commonRunDir, it)
			assert file.exists() || file.isFile()
		}
		linkedDirs.each {
			mkdir new File(commonRunDir, it).toPath()
		}
		enabled_loaders.split(/[^a-z]+/).each {
			File loaderRunDir = project(it).file("run")
			if (!loaderRunDir.isDirectory()) {
				mkdir loaderRunDir
				return
			}
			linkedFiles.each {
				linkFileTo(new File(loaderRunDir, it), new File(commonRunDir, it))
			}
			linkedDirs.each {
				linkDirTo(new File(loaderRunDir, it), new File(commonRunDir, it))
			}
		}
	}
}
publishMods {
	def toVersionType = { String type ->
		switch (type) {
			case "release":
				return ReleaseType.STABLE
			case "stable":
				return ReleaseType.STABLE
			case "beta":
				return ReleaseType.BETA
			case "alpha":
				return ReleaseType.ALPHA
			default:
				throw new IllegalArgumentException("Unknown type: ${type}")
		}
	}
	dryRun = providers.environmentVariable("DO_PUBLISH_MOD").getOrNull() != "true"
	version = mod_version
	type = toVersionType(mod_version_type)
	changelog = readChangelog(true)
	if (!dryRun) {
		assert providers.environmentVariable("MODRINTH_TOKEN").present
		assert providers.environmentVariable("CURSEFORGE_TOKEN").present
	}
	def loaderOptions = { String loader ->
		publishOptions {
			modLoaders.add(loader)
			// import net.fabricmc.loom.task.RemapJarTask
			file = project(":${loader}").remapJar.archiveFile
			file = file.get().asFile.toPath().parent.resolve("${archiveFileNameOfLoader(loader)}.jar").toFile()
			displayName = "${mod_version}-mc${minecraft_version}-${loader}"
		}
	}
	def modrinthOptions = modrinthOptions {
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		projectId = modrinth_project_id
		minecraftVersions.add(minecraft_version)
	}
	def curseforgeOptions = curseforgeOptions {
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		projectId = curseforge_project_id
		minecraftVersions.add(minecraft_version)
		javaVersions.add(JavaVersion.toVersion(java_version))
		clientRequired = true
		serverRequired = false
	}
	modrinth("modrinthFabric") {
		from modrinthOptions, loaderOptions("fabric")
		requires "fabric-api"
		requires "architectury-api"
		optional "cloth-config"
		optional "yacl"
		optional "modmenu"
	}
	curseforge("curseforgeFabric") {
		from curseforgeOptions, loaderOptions("fabric")
		requires "fabric-api"
		requires "architectury-api"
		optional "cloth-config"
		optional "yacl"
		optional "modmenu"
	}
	modrinth("modrinthForge") {
		from modrinthOptions, loaderOptions("forge")
		requires "architectury-api"
		optional "cloth-config"
	}
	curseforge("curseforgeForge") {
		from curseforgeOptions, loaderOptions("forge")
		requires "architectury-api"
		optional "cloth-config"
	}
}
